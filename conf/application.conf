# Noisycamp is a platform for booking music studios.
# Copyright (C) 2019  Raphael Javaux <raphaeljavaux@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

http.serverName = "https://noisycamp.com"
http.serverName = ${?SERVER_NAME}

play.crypto.secret=${PLAY_APP_SECRET}

play.filters.headers.contentSecurityPolicy = null
play.filters.disabled += play.filters.hosts.AllowedHostsFilter

# Maximum size for multipart/form-data requests.
play.http.parser.maxDiskBuffer = 50MB

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"

play.modules.enabled += "modules.SilhouetteModule"
# play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

# Provides an ExecutionContext for background jobs and blocking API calls.
task-execution-context {
    fork-join-executor {
        parallelism-factor = 4 # 4 times the number of CPUs.
        parallelism-factor = ${?TASK_EXECUTOR_PARALLELISM_FACTOR}

        parallelism-max = 16
        parallelism-max = ${?TASK_EXECUTOR_PARALLELISM_MAX}
    }
}

silhouette {
    # Authenticator settings
    authenticator.cookieName="authenticator"
    authenticator.cookiePath="/"
    authenticator.secureCookie=false // Disabled for testing on localhost
                                     // without SSL, otherwise cookie couldn't
                                     // be set.
    authenticator.httpOnlyCookie=true
    authenticator.sameSite="Lax"
    authenticator.useFingerprinting=true

    authenticator.authenticatorIdleTimeout=15 days
    authenticator.authenticatorExpiry=365 days

    authenticator.signer.key = ${AUTH_SIGNER_KEY}
    authenticator.crypter.key = ${AUTH_CRYPTER_KEY}

    # Social state handler
    socialStateHandler.signer.key = ${AUTH_SIGNER_KEY}

    # CSRF state item handler settings
    csrfStateItemHandler.cookieName="OAuth2State"
    csrfStateItemHandler.cookiePath="/"
    csrfStateItemHandler.secureCookie=false
    csrfStateItemHandler.httpOnlyCookie=true
    csrfStateItemHandler.sameSite="Lax"
    csrfStateItemHandler.expirationTime=5 minutes

    csrfStateItemHandler.signer.key = ${AUTH_SIGNER_KEY}

    # Facebook provider
    facebook.authorizationURL="https://graph.facebook.com/v2.3/oauth/authorize"
    facebook.accessTokenURL="https://graph.facebook.com/v2.3/oauth/access_token"
    facebook.redirectURL=${http.serverName}"/social/authenticate/facebook"
    facebook.clientID=${FACEBOOK_CLIENT_ID}
    facebook.clientSecret=${FACEBOOK_CLIENT_SECRET}
    facebook.scope="email"

    # Google provider
    google.authorizationURL="https://accounts.google.com/o/oauth2/auth"
    google.accessTokenURL="https://accounts.google.com/o/oauth2/token"
    google.redirectURL=${http.serverName}"/social/authenticate/google"
    google.clientID=${GOOGLE_CLIENT_ID}
    google.clientSecret=${GOOGLE_CLIENT_SECRET}
    google.scope="profile email"
}

# Opens a PostgreSQL database specified in JDBC_DATABASE_URL.
slick.dbs.default {
    profile = "slick.jdbc.PostgresProfile$"
    db.driver = "org.postgresql.Driver"
    db.url = ${JDBC_DATABASE_URL}

    db.numThreads = 8
    db.numThreads = ${?DB_NUM_THREADS}
    db.connectionTimeout = 3s
    db.connectionTimeout = ${?DB_CONNECTION_TIMEOUT}

    db.initializationFailFast = true
}

# Required for Play Migrations
db.default.driver=${slick.dbs.default.db.driver}
db.default.url=${slick.dbs.default.db.url}

mapbox.token = ${MAPBOX_TOKEN}

sendgrid {
    apiKey = ${SENDGRID_API_KEY}
}

stripe {
    clientID = ${STRIPE_CLIENT_ID}

    secretKey = ${STRIPE_SECRET_KEY}
    publicKey = ${STRIPE_PUBLIC_KEY}

    webhookSecret = ${STRIPE_WEBHOOK_SECRET}
}

panelbear {
    siteID = ${?PANELBEAR_SITEID}
}

noisycamp {
    forceHttps = false
    forceHttps = ${?FORCE_HTTPS}

    # Maximum delay ahead a studio can be booked.
    maxBookingAdvance = 180 days # Six months

    picturesMaxCacheSize = 50MB
    picturesMaxCacheSize = ${?PICTURES_MAX_CACHE_SIZE}

    geoIpCacheExpireAfter = 6 hours
    geoIpCacheExpireAfter = ${?GEOIP_CACHE_EXPIRE_AFTER}
    geoIpMaxCacheSize = 65536 # A couple of MB
    geoIpMaxCacheSize = ${?GEOIP_MAX_CACHE_SIZE}

    # If true, keeps the timezone map in memory. Reduces latency but increase memory usage.
    cacheTimeZoneEngine = true
    cacheTimeZoneEngine = ${?CACHE_TIME_ZONE_ENGINE}

    fromEmail = "hello@noisycamp.com"
    replyToEmail = "hello@noisycamp.com"

    // Hostname of the (optional) CDN, with the http:// or https:// prefix
    cdnHost = ${?CDN_HOST}
}
