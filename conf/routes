# Noisycamp is a platform for booking music studios.
# Copyright (C) 2019  Raphael Javaux <raphaeljavaux@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

GET     /                               controllers.IndexController.index

# Authentication

GET     /sign-in                        controllers.AuthController.signIn(redirectTo: Option[String] ?= None)
POST    /sign-in                        controllers.AuthController.signInSubmit(redirectTo: Option[String] ?= None)

GET     /sign-up                        controllers.AuthController.signUp(redirectTo: Option[String] ?= None)
POST    /sign-up                        controllers.AuthController.signUpSubmit(redirectTo: Option[String] ?= None)

GET     /sign-out                       controllers.AuthController.signOut

GET     /social/authenticate/:provider  controllers.AuthController.oauth2Authenticate(provider: String, redirectTo: Option[String] ?= None)

# User account

GET     /account                        controllers.account.IndexController.index

GET     /account/bookings/:id           controllers.account.BookingsController.show(id: Long)

GET     /account/studios                controllers.account.studios.IndexController.index

GET     /account/studios/create         controllers.account.studios.IndexController.create
POST    /account/studios/create         controllers.account.studios.IndexController.createSubmit

GET     /account/studios/:id/settings   controllers.account.studios.IndexController.settings(id: Long)
POST    /account/studios/:id/settings   controllers.account.studios.IndexController.settingsSubmit(id: Long)

GET     /account/studios/:id/bookings           controllers.account.studios.BookingsController.index(id: Long)
GET     /account/studios/:id/bookings/calendar  controllers.account.studios.BookingsController.calendar(id: Long)

GET     /account/studios/:id/bookings/:booking  controllers.account.studios.BookingsController.show(id: Long, booking: Long)
GET     /account/studios/:id/bookings/:booking/accept  controllers.account.studios.BookingsController.accept(id: Long, booking: Long)
GET     /account/studios/:id/bookings/:booking/reject  controllers.account.studios.BookingsController.reject(id: Long, booking: Long)
GET     /account/studios/:id/bookings/:booking/cancel  controllers.account.studios.BookingsController.cancel(id: Long, booking: Long)

GET     /account/studios/:id/publish    controllers.account.studios.IndexController.publish(id: Long)

GET     /account/payouts                controllers.account.PayoutsController.index
GET     /account/payouts/stripe-oauth   controllers.account.PayoutsController.stripeOAuth
GET     /account/payouts/stripe-oauth-complete  controllers.account.PayoutsController.stripeOAuthComplete
GET     /account/payouts/stripe-dashboard   controllers.account.PayoutsController.stripeDashboard

GET     /account/premium/upgrade        controllers.account.PremiumController.upgrade
POST    /account/premium/upgrade        controllers.account.PremiumController.upgradeSubmit

# Studios

GET     /studios                        controllers.StudiosController.index
GET     /studios/search                 controllers.StudiosController.search

GET     /studios/:id                    controllers.StudiosController.show(id: Long)

# Booking

GET     /studios/:studioId/booking      controllers.studios.BookingController.show(studioId: Long, beginsAt: String, duration: Int)
POST    /studios/:studioId/booking      controllers.studios.BookingController.submit(studioId: Long)

GET     /studios/:studioId/booking/payment/:sessionId/success controllers.studios.BookingController.paymentSuccess(studioId: Long, sessionId: String)

POST    /webhooks/stripe/session-completed controllers.studios.BookingController.stripeCompleted

# Pictures

POST    /pictures                       controllers.PictureController.upload

GET     /pictures/:id                   controllers.PictureController.view(id: String)

GET     /pictures/:id/bound/:size       controllers.PictureController.bound(id: String, size: String)
GET     /pictures/:id/cover/:size       controllers.PictureController.cover(id: String, size: String)
GET     /pictures/:id/max/:size         controllers.PictureController.max(id: String, size: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                   controllers.Assets.versioned(path="/public", file: Asset)
